{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","classNames","completed","title","users","map","userId","TodoList","todos","App","useState","todosFromServer","curentTodos","setCurentTodos","newTitle","setNewTitle","hasTitleError","setHasTitleError","choosenUser","setChoosenUser","hasUserError","setHasUserError","action","method","onSubmit","event","preventDefault","arr","newTodo","Math","max","object","htmlFor","type","value","placeholder","onChange","target","required","disabled","usersFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b8de877d.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport users from '../../api/users';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {users.map((user) => (user.id === todo.userId && (\n        <UserInfo user={user} key={user.id} />\n      )))}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo todo={todo} key={todo.id} />\n      ))}\n      {/* <article data-id=\"1\" className=\"TodoInfo TodoInfo--completed\">\n        <h2 className=\"TodoInfo__title\">\n          delectus aut autem\n        </h2>\n\n        <a className=\"UserInfo\" href=\"mailto:Sincere@april.biz\">\n          Leanne Graham\n        </a>\n      </article>\n\n      <article data-id=\"15\" className=\"TodoInfo TodoInfo--completed\">\n        <h2 className=\"TodoInfo__title\">delectus aut autem</h2>\n\n        <a className=\"UserInfo\" href=\"mailto:Sincere@april.biz\">\n          Leanne Graham\n        </a>\n      </article>\n\n      <article data-id=\"2\" className=\"TodoInfo\">\n        <h2 className=\"TodoInfo__title\">\n          quis ut nam facilis et officia qui\n        </h2>\n\n        <a className=\"UserInfo\" href=\"mailto:Julianne.OConner@kory.org\">\n          Patricia Lebsack\n        </a>\n      </article> */}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useState } from 'react';\n\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [curentTodos, setCurentTodos] = useState(todosFromServer);\n\n  const [newTitle, setNewTitle] = useState('');\n  const [hasTitleError, setHasTitleError] = useState(false);\n\n  const [choosenUser, setChoosenUser] = useState(0);\n  const [hasUserError, setHasUserError] = useState(false);\n\n  const maxId = (arr: Todo[]): number => {\n    const max = Math.max(...arr.map(object => object.id));\n\n    return max + 1;\n  };\n\n  const reset = () => {\n    setNewTitle('');\n    setChoosenUser(0);\n    setHasTitleError(false);\n    setHasUserError(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    setHasTitleError(!newTitle);\n    setHasUserError(choosenUser === 0);\n\n    if (!newTitle || choosenUser === 0) {\n      return;\n    }\n\n    const newTodo: Todo = {\n      id: maxId(curentTodos),\n      title: newTitle,\n      completed: false,\n      userId: choosenUser,\n    };\n\n    setCurentTodos([...curentTodos, newTodo]);\n\n    reset();\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/todos\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label htmlFor=\"title-input\">Title: </label>\n          <input\n            id=\"title-input\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={newTitle}\n            placeholder=\"Enter a title\"\n            onChange={(event) => {\n              setNewTitle(event.target.value);\n              setHasTitleError(false);\n            }}\n          />\n          {hasTitleError && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"select-user\">User: </label>\n          <select\n            id=\"select-user\"\n            data-cy=\"userSelect\"\n            value={choosenUser}\n            required\n            onChange={(event) => {\n              setChoosenUser(+event.target.value);\n              setHasUserError(false);\n            }}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(user => (\n              <option value={user.id}>{user.name}</option>\n            ))}\n          </select>\n\n          {hasUserError && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList\n        todos={curentTodos}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}